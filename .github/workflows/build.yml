name: CI

on:
  workflow_dispatch:
  push:
    branches:
    - master

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        project-path: 
        - 'build_ci.ppj'
        
    env:
      python-version: 3.x
      python-arch: x64

    steps:
    - uses: actions/checkout@v2
      with:
        path: ./repo
        
    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
        architecture:  ${{ env.python-arch }}

    - name: Pull papyrus compiler
      uses: actions/checkout@v2
      with:
        repository: Osmosis-Wrench/JContainers-Compiler-Only
        token: ${{ secrets.PPJ_ACCESS_TOKEN }}
        ref: master
        path: ./compiler

    - name: Get latest Pyro release
      id: pyro_asset
      uses: MrOctopus/download-asset-action@main
      with:
        repository: fireundubh/pyro
        excludes: draft
        asset: pyro

    - name: Extract Pyro
      run: 7z x ${Env:release_name} -opyro
      env: 
        release_name: ${{ steps.pyro_asset.outputs.name }}

    - name: Build releases
      run: |
        .\pyro\pyro --game-path . --compiler-path ${Env:ppj_c} --flags-path ${Env:ppj_f} --access-token ${Env:ppj_t} .\repo\${Env:ppj_p}
      env: 
        ppj_c: compiler/PapyrusCompiler.exe
        ppj_f: compiler/TESV_Papyrus_Flags.flg
        ppj_t: ${{ secrets.PPJ_ACCESS_TOKEN }}
        ppj_p: ${{ matrix.project-path }}

    - name: Prepare upload
      if: success()
      run: |
        cd dist
        7z x *zip -o*
        echo "build_name=$(Get-ChildItem -Filter *. -Name)" >> ${Env:GITHUB_ENV}
    - name: Upload release
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.build_name }}
        path: ./dist/${{ env.build_name }}
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Create Github Release
      if: success() && github.ref == 'refs/heads/release'
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.date.outputs.date }}
        tag_name: ${{ steps.date.outputs.date }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload artifact to github release
      if: success() && github.ref == 'refs/heads/release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ env.build_name }}
        asset_name: ${{ env.build_name }}
        asset_content_type: application/gzip
